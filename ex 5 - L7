void setup()
{ 
  int[] students_id = {12757, 20001, 12334, 14332, 99999,
                       10111, 20101, 12034, 10332, 99991};
  double[] midterm_marks = {99, 67, 88, 91, 56, 90, 70, 69, 79, 59};
  double[] final_marks = {89, 76, 80, 67, 99, 98, 56, 96, 90, 60};
  String[] students_name= {"Tim", "Joe", "Ali", "Kim", "Pam",
                            "Rob", "Ben", "Ted", "Lee", "Jim"};

  print_records(students_id, midterm_marks, final_marks, students_name);
  
  // Array of indices will be used to indicate the order of records based on
  // students' id numbers.
  int[] indices = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9};
 
  // Insertion sort will reorder the indices based on ids in ascending order.
  // (The array students_id won't change at all.)
  sort_records_by_id(indices, students_id);

  println();  
  println("Students records after sorting id by numbers:");
  print_sorted_records(indices, students_id,
                       midterm_marks, final_marks, students_name);
  
  // Search for positions of students in the array of names and print
  // their records, if available.

  // This search should succeed.
  int position = search(students_name, "Kim");
  if (position == -1) {
    println("Search failed: " + "Kim" + " NOT FOUND");
  }
  else {
    double average = calculate_student_average(midterm_marks[position],
                                               final_marks[position]);
    println(students_name[position]
            + " was found with id " + students_id[position] 
            + ", midterm mark " + midterm_marks[position]
            + ", final mark " + final_marks[position] 
            + ", term average " + average
            + ", and overall grade " + letter_grade_calculation (average));  
  }      
    
  // This search should fail.
  position = search(students_name, "Sam");    
  if (position == -1) {
    println("Search failed: " + "Sam" + " NOT FOUND");
  }
  else {
    double average = calculate_student_average(midterm_marks[position],
                                               final_marks[position]);
    println(students_name[position]
            + " was found with id " + students_id[position] 
            + ", midterm mark " + midterm_marks[position]
            + ", final mark " + final_marks[position] 
            + ", term average " + average
            + ", and overall grade " + letter_grade_calculation (average));  
  }      
}
double calculate_classave (double [] exam)
{
  double s = 0;
  for(double x: exam){
    s += x;
  }
  return s/exam.length;
}
double calculate_student_average(double mid_mark, double final_mark){
  return(mid_mark + final_mark)/2;
}
char letter_grade_calculation(double s_ave)
{
  if (s_ave >= 90)
  return 'A';
  else if (s_ave>=80)
  return 'B';
  else if (s_ave>=70)
  return'C';
  else if (s_ave>=60)
  return 'D';
  else 
  return 'F';
}
void print_records (int [] students_id, double [] midterm_marks, double [] final_marks, String[] students_name){
  println ("Name   ID  Mid  Final  Average  Mark");
  println("-----------------------------------------");
  for(int i = 0; i < students_id.length; i++){
    println(students_name[i]);
    println("          ");
    println(students_id[i]);
    println("          ");
    println(midterm_marks[i]);
    println("          ");
    println(final_marks[i]);
    println("          ");
    println(calculate_student_average(midterm_marks[i], final_marks[i]));
    println("          ");
    println(letter_grade_calculation(calculate_student_average(midterm_marks[i],final_marks[i])));
    println();
  }
}
void sort_records_by_id(int [] indices, int [] students_id){
  int n = indices.length;
  int [] temp = new int [n];
  for(int i = 0; i<n; i++){
    temp[i] = students_id[i];
  }
  for (int i =1; i< n; ++i){
    int k = temp[i];
    int m = indices[i];
    int j = i-1;
    while (j>=0 && temp[j]>k){
      temp[j+1]=temp[j];
      indices[j+1]=indices[j];
      j = j-1;
    }
    temp [j +1 ] =k;
    indices [j +1]= m;
  }
}
void print_sorted_records(int [] indices, int [] students_id, double [] midterm_marks, double [] final_marks, String [] students_name){
  println ("Name   ID  Mid  Final  Average  Mark");
  println("-----------------------------------------");
  for(int j = 0; j < students_id.length; j++){
    int i = indices[j];
    println(students_name[i]);
    println("          ");
    println(students_id[i]);
    println("          ");
    println(midterm_marks[i]);
    println("          ");
    println(final_marks[i]);
    println("          ");
    println(calculate_student_average(midterm_marks[i], final_marks[i]));
    println("          ");
    println(letter_grade_calculation(calculate_student_average(midterm_marks[i],final_marks[i])));
    println();
  }
  println();
}
int search(String [] students_name, String target){
  int i = 0;
  while(i<students_name.length){
    if (students_name[i++].equals(target)){
      return i - 1;
    }
  }
  return -1;
}
 
    
